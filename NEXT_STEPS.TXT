The user wants a smart, 
  user-guided approach for labeling 
  line items. Let me break down 
  their requirements:

  1. Keep existing Cell Reference 
  column - don't replace it, add a 
  new "Name" column
  2. Worksheet-specific 
  configuration - each sheet can 
  have names in different columns
  3. On-demand naming - user selects
   which column contains names for a
   specific sheet, and all values 
  from that sheet get auto-populated
  4. Dropdown selection - when user 
  clicks on a cell from a sheet, 
  show dropdown with first few 
  columns' values for that row
  5. Sheet-level persistence - once 
  a column is selected for a sheet, 
  all future values from that sheet 
  use that column
  6. Cross-sheet independence - 
  other worksheets remain unnamed 
  until user configures them

  So the workflow would be:
  1. User sees drill-down with cell 
  references like "Segments!BT71"
  2. User clicks some action to 
  configure naming for the 
  "Segments" sheet
  3. System shows dropdown with 
  values from columns A, B, C, D, 
  etc. for row 71: [" ", "62", 
  "Operating Income (loss)", "-1"]
  4. User selects "Operating Income 
  (loss)" (probably column C)
  5. System remembers that Segments 
  sheet uses column C for names
  6. All current and future Segments
   sheet values now show meaningful 
  names
  7. Other sheets (like "Model", 
  "Assumptions") still show cell 
  references until configured

  This is a great approach because:
  - Minimal user effort (one 
  selection per sheet)
  - Immediate value
  - Handles different sheet layouts
  - On-demand/progressive 
  enhancement
  - Preserves technical info (cell 
  references)

‚óè Excellent approach! Let me
  summarize your intelligent naming
  strategy:

  üìã Summary: On-Demand Sheet-Level 
  Naming System

  Core Concept:

  - Preserve existing: Keep Cell
  Reference column as-is
  - Add new column: "Name" column
  for human-readable labels
  - Sheet-specific: Each worksheet
  can have names in different
  columns
  - On-demand: Users configure
  naming only when needed
  - Auto-propagation: Once
  configured, all values from that
  sheet get named automatically

  User Workflow:

  1. User sees drill-down table with
   technical references like
  "Segments!BT71"
  2. User clicks "Configure Names"
  for the "Segments" sheet (or
  similar UI action)
  3. System presents dropdown with
  row 71's values from first ~5
  columns: [" ", "62", "Operating
  Income (loss)", "-1"]
  4. User selects meaningful option
  (e.g., "Operating Income (loss)"
  from column C)
  5. System remembers: "Segments
  sheet uses column C for names"
  6. All Segments values (past and
  future) now show proper names
  7. Other sheets remain technical
  until user configures them

  üéØ Implementation Plan

  Phase 1: Data Model Enhancement

  - Backend: Add name resolution
  logic to FormulaAnalyzer
  - Session storage: Track sheet ‚Üí
  label column mappings per session
  - API enhancement: Include
  resolved names in dependency
  responses
  - Database: Store user preferences
   (future: remember across
  sessions)

  Phase 2: UI Enhancement

  - New column: Add "Name" column to
   drill-down table
  - Configuration UI: "‚öôÔ∏è Configure
  Names" button per sheet
  - Column picker: Dropdown showing
  sample values from first 5-6
  columns
  - Visual feedback: Show which
  sheets are configured vs
  unconfigured

  Phase 3: Smart Features

  - Auto-suggestion: Highlight
  likely name columns (text-heavy,
  meaningful content)
  - Bulk configuration: "Configure
  all visible sheets" option
  - Name quality: Visual indicators
  for good vs poor name columns
  - Manual override: Click to edit
  individual names

  üîß Technical Architecture

  Backend Changes:

  Session Storage:
  {
    "session_123": {
      "sheet_name_columns": {
        "Segments": "C",
        "Model": "B", 
        "Assumptions": "A"
      }
    }
  }

  API Response Enhancement:
  {
    "cell_reference":
  "Segments!BT71",
    "name": "Operating Income
  (loss)",  // NEW
    "name_source": "Column C",      
      // NEW  
    "value": 14
  }

  Frontend Changes:

  - New API: GET /api/sheet-columns/
  {session_id}/{sheet_name}/{row} ‚Üí
  returns column samples
  - Settings UI: Modal for
  configuring sheet name columns
  - Table enhancement: Add Name
  column with fallback to cell
  reference
  - State management: Track
  configured sheets and their
  settings

  üé® UI/UX Details

  Drill-down Table:

  | Name                    | Cell
  Reference | Value | Formula | Type
      |
  |------------------------|--------
  --------|-------|---------|-------
  --|
  | Operating Income (loss) |
  Segments!BT71  | 14    | Constant|
   Constant|
  | Segments!BT57          |
  Segments!BT57  | 239.4 | =BT52*...
   | Formula |

  Configuration Flow:

  1. Trigger: "‚öôÔ∏è" icon next to
  unconfigured sheet names
  2. Modal: "Configure Names for
  'Segments' Sheet"
  3. Preview: Show 3-4 sample rows
  with column options
  4. Selection: Radio buttons or
  dropdown for column choice
  5. Apply: Immediate update of all
  visible values

  üöÄ Benefits

  For Users:

  - Minimal effort: One click per
  sheet when needed
  - Immediate value: See meaningful
  names right away
  - Flexible: Different sheets can
  use different naming conventions
  - Progressive: Only configure what
   you're actively analyzing

  For System:

  - Scalable: No AI dependencies or
  complex heuristics needed
  - Reliable: User knows their model
   structure best
  - Fast: Simple column lookup, no
  heavy processing
  - Maintainable: Clear, simple
  logic

  üéØ Success Metrics

  - User adoption: % of sessions
  that configure at least one sheet
  - Efficiency: Time saved
  identifying line items
  - Accuracy: User satisfaction with
   name quality
  - Coverage: % of drill-down items
  that have meaningful names

  Ready to proceed with this 
  approach? Should we start with 
  Phase 1 (backend data model) or 
  would you prefer to begin with the
   UI mockup?